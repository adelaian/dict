def load_dictionary(file_path):
    dictionary = {}
    with open(file_path, 'r') as file:
        for line in file:
            word, definition = line.strip().split(':')
            dictionary[word] = definition
    return dictionary

def search_word(dictionary, word):
    if word in dictionary:
        return dictionary[word]
    else:
        return "未找到该单词的释义。"

print("电子词典命令行工具")

dictionary = load_dictionary('dictionary.txt')

while True:
    print("\n请选择操作：")
    print("1. 查询单词释义")
    print("2. 退出程序")

    choice = input("请选择操作（输入数字）：")

    if choice == '2':
        print("谢谢使用，再见！")
        break

    if choice == '1':
        word = input("请输入要查询的单词：")
        definition = search_word(dictionary, word)
        print("释义：", definition)
    else:
        print("无效的选择，请重新输入。")

//以上代码是一个简单的电子词典命令行工具。用户可以选择查询单词释义，并输入要查询的单词。

//load_dictionary() 函数用于加载存储在文件中的词典数据。该函数读取文件的每一行，将单词和对应的释义存储在字典中，并返回该字典。

//search_word() 函数接受一个词典和要查询的单词作为输入。如果单词存在于词典中，函数返回其对应的释义；否则返回一个未找到单词的提示。

//应用程序使用一个无限循环来等待用户输入操作和相应的信息，并根据用户选择执行相应的操作。用户可以选择退出程序来结束应用程序的运行。

//请注意，这只是一个简单的示例，使用简单的文本文件作为词典数据。在实际项目中，您可能需要考虑更复杂的词典数据结构和更高级的单词查询功能，以实现一个更全面和功能丰富的电子词典工具。
